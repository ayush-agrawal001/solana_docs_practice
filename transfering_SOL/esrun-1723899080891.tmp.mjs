process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("esrun-1723899080891.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// traSOL.ts
import { LAMPORTS_PER_SOL, Keypair, Connection, Transaction, SystemProgram, PublicKey, sendAndConfirmTransaction } from "../node_modules/@solana/web3.js/lib/index.cjs.js";
import { airdropIfRequired } from "../node_modules/@solana-developers/helpers/dist/index.js";

// sec.json
var SECRET_KEY = [109, 246, 8, 230, 244, 6, 12, 54, 213, 204, 74, 250, 169, 25, 199, 141, 212, 1, 199, 17, 39, 177, 154, 191, 21, 74, 60, 224, 77, 139, 130, 178, 6, 116, 34, 32, 248, 76, 121, 56, 178, 165, 60, 165, 152, 179, 35, 240, 175, 18, 61, 31, 134, 179, 250, 179, 230, 64, 2, 5, 225, 186, 41, 38];

// traSOL.ts
var conn = new Connection("https://api.devnet.solana.com", "confirmed");
var transaction = new Transaction();
var myKeyPair = Keypair.fromSecretKey(new Uint8Array(SECRET_KEY));
var fpk = new PublicKey("SC9zgtaHCcmPgbBbMq31x8gUr2qhpYkCbV1jSdqTUGd");
var tpk = new PublicKey("5rmDFipvqTrqjYxD4QNWQugYpaaYLjKxM7aGvqkZoJJp");
await airdropIfRequired(
  conn,
  fpk,
  1 * LAMPORTS_PER_SOL,
  1 * LAMPORTS_PER_SOL
);
var amount = 1;
var instructionSOL = SystemProgram.transfer({
  //The program used in this instruction will be the system program (at the address 11111111111111111111111111111111)
  fromPubkey: fpk,
  toPubkey: tpk,
  lamports: LAMPORTS_PER_SOL * amount
});
transaction.add(instructionSOL);
var signature = sendAndConfirmTransaction(conn, transaction, [myKeyPair]);
console.log(`Transaction of ${amount} SOL from ${fpk} to ${tpk}`);
console.log(`Signature of the following:- ${signature}`);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidHJhU09MLnRzIiwgInNlYy5qc29uIl0sCiAgInNvdXJjZVJvb3QiOiAiRTpcXFdFQjMuMFxcc29sYW5hX2RvY3NcXHRyYW5zZmVyaW5nX1NPTCIsCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBMQU1QT1JUU19QRVJfU09MLCBLZXlwYWlyLCBDb25uZWN0aW9uLCBUcmFuc2FjdGlvbiwgU3lzdGVtSW5zdHJ1Y3Rpb24sIFN5c3RlbVByb2dyYW0sIFB1YmxpY0tleSwgc2VuZEFuZENvbmZpcm1SYXdUcmFuc2FjdGlvbiwgc2VuZEFuZENvbmZpcm1UcmFuc2FjdGlvbiB9IGZyb20gXCJAc29sYW5hL3dlYjMuanNcIjtcclxuaW1wb3J0IHsgYWlyZHJvcElmUmVxdWlyZWQsIGdldEtleXBhaXJGcm9tRW52aXJvbm1lbnQgfSBmcm9tIFwiQHNvbGFuYS1kZXZlbG9wZXJzL2hlbHBlcnNcIjtcclxuaW1wb3J0ICogYXMgc2VjcmV0S2V5IGZyb20gXCIuL3NlYy5qc29uXCJcclxuXHJcbmNvbnN0IGNvbm4gPSBuZXcgQ29ubmVjdGlvbihcImh0dHBzOi8vYXBpLmRldm5ldC5zb2xhbmEuY29tXCIsICdjb25maXJtZWQnKVxyXG5cclxuY29uc3QgdHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24oKVxyXG5cclxuY29uc3QgbXlLZXlQYWlyID0gS2V5cGFpci5mcm9tU2VjcmV0S2V5KG5ldyBVaW50OEFycmF5KHNlY3JldEtleS5TRUNSRVRfS0VZKSlcclxuXHJcbmNvbnN0IGZwayA9IG5ldyBQdWJsaWNLZXkoXCJTQzl6Z3RhSENjbVBnYkJiTXEzMXg4Z1VyMnFocFlrQ2JWMWpTZHFUVUdkXCIpXHJcbmNvbnN0IHRwayA9IG5ldyBQdWJsaWNLZXkoXCI1cm1ERmlwdnFUcnFqWXhENFFOV1F1Z1lwYWFZTGpLeE03YUd2cWtab0pKcFwiKVxyXG5cclxuYXdhaXQgYWlyZHJvcElmUmVxdWlyZWQoXHJcbiAgICBjb25uLFxyXG4gICAgZnBrLFxyXG4gICAgMSAqIExBTVBPUlRTX1BFUl9TT0wsXHJcbiAgICAxICogTEFNUE9SVFNfUEVSX1NPTFxyXG4pIC8vIFRoaXMgZG9lcyBub3Qgd29yayBpbiBtYWluTmV0IChvYnZpb3VzbHkpXHJcblxyXG5jb25zdCBhbW91bnQgPSAxXHJcblxyXG5jb25zdCBpbnN0cnVjdGlvblNPTCA9IFN5c3RlbVByb2dyYW0udHJhbnNmZXIoeyBcclxuICAgIC8vVGhlIHByb2dyYW0gdXNlZCBpbiB0aGlzIGluc3RydWN0aW9uIHdpbGwgYmUgdGhlIHN5c3RlbSBwcm9ncmFtIChhdCB0aGUgYWRkcmVzcyAxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMSlcclxuICAgIGZyb21QdWJrZXk6IGZwayxcclxuICAgIHRvUHVia2V5OiB0cGssXHJcbiAgICBsYW1wb3J0czogTEFNUE9SVFNfUEVSX1NPTCAqIGFtb3VudFxyXG59KVxyXG5cclxudHJhbnNhY3Rpb24uYWRkKGluc3RydWN0aW9uU09MKVxyXG5cclxuY29uc3Qgc2lnbmF0dXJlID0gc2VuZEFuZENvbmZpcm1UcmFuc2FjdGlvbihjb25uLCB0cmFuc2FjdGlvbiwgW215S2V5UGFpcl0gKS8vIGhvdmVyIGFuZCBzZWUgdGhlIGFyZ3Mgcm9sZSBcclxuXHJcbmNvbnNvbGUubG9nKGBUcmFuc2FjdGlvbiBvZiAke2Ftb3VudH0gU09MIGZyb20gJHtmcGt9IHRvICR7dHBrfWApXHJcbmNvbnNvbGUubG9nKGBTaWduYXR1cmUgb2YgdGhlIGZvbGxvd2luZzotICR7c2lnbmF0dXJlfWApIiwgIntcclxuICAgIFwiU0VDUkVUX0tFWVwiOiBbMTA5LDI0Niw4LDIzMCwyNDQsNiwxMiw1NCwyMTMsMjA0LDc0LDI1MCwxNjksMjUsMTk5LDE0MSwyMTIsMSwxOTksMTcsMzksMTc3LDE1NCwxOTEsMjEsNzQsNjAsMjI0LDc3LDEzOSwxMzAsMTc4LDYsMTE2LDM0LDMyLDI0OCw3NiwxMjEsNTYsMTc4LDE2NSw2MCwxNjUsMTUyLDE3OSwzNSwyNDAsMTc1LDE4LDYxLDMxLDEzNCwxNzksMjUwLDE3OSwyMzAsNjQsMiw1LDIyNSwxODYsNDEsMzhdXHJcbn0iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxrQkFBa0IsU0FBUyxZQUFZLGFBQWdDLGVBQWUsV0FBeUMsaUNBQWlDO0FBQ3pLLFNBQVMseUJBQW9EOzs7QUNBekQsaUJBQWMsQ0FBQyxLQUFJLEtBQUksR0FBRSxLQUFJLEtBQUksR0FBRSxJQUFHLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLEtBQUksR0FBRSxLQUFJLElBQUcsSUFBRyxLQUFJLEtBQUksS0FBSSxJQUFHLElBQUcsSUFBRyxLQUFJLElBQUcsS0FBSSxLQUFJLEtBQUksR0FBRSxLQUFJLElBQUcsSUFBRyxLQUFJLElBQUcsS0FBSSxJQUFHLEtBQUksS0FBSSxJQUFHLEtBQUksS0FBSSxLQUFJLElBQUcsS0FBSSxLQUFJLElBQUcsSUFBRyxJQUFHLEtBQUksS0FBSSxLQUFJLEtBQUksS0FBSSxJQUFHLEdBQUUsR0FBRSxLQUFJLEtBQUksSUFBRyxFQUFFOzs7QURHaFAsSUFBTSxPQUFPLElBQUksV0FBVyxpQ0FBaUMsV0FBVztBQUV4RSxJQUFNLGNBQWMsSUFBSSxZQUFZO0FBRXBDLElBQU0sWUFBWSxRQUFRLGNBQWMsSUFBSSxXQUFxQixVQUFVLENBQUM7QUFFNUUsSUFBTSxNQUFNLElBQUksVUFBVSw2Q0FBNkM7QUFDdkUsSUFBTSxNQUFNLElBQUksVUFBVSw4Q0FBOEM7QUFFeEUsTUFBTTtBQUFBLEVBQ0Y7QUFBQSxFQUNBO0FBQUEsRUFDQSxJQUFJO0FBQUEsRUFDSixJQUFJO0FBQ1I7QUFFQSxJQUFNLFNBQVM7QUFFZixJQUFNLGlCQUFpQixjQUFjLFNBQVM7QUFBQTtBQUFBLEVBRTFDLFlBQVk7QUFBQSxFQUNaLFVBQVU7QUFBQSxFQUNWLFVBQVUsbUJBQW1CO0FBQ2pDLENBQUM7QUFFRCxZQUFZLElBQUksY0FBYztBQUU5QixJQUFNLFlBQVksMEJBQTBCLE1BQU0sYUFBYSxDQUFDLFNBQVMsQ0FBRTtBQUUzRSxRQUFRLElBQUksa0JBQWtCLG1CQUFtQixVQUFVLEtBQUs7QUFDaEUsUUFBUSxJQUFJLGdDQUFnQyxXQUFXOyIsCiAgIm5hbWVzIjogW10KfQo=

	